package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private final JoinPredicate p;
    private OpIterator child1;
    private OpIterator child2;
    private final TupleDesc tupleDescJoin;
    private boolean loopInChild2 = false; //Used for fetch next to know if the return was in the first or second loop
    private Tuple tupleLoop1; //Used in the same loop
    private String name1 = "";
    private String name2 = "";

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
    	
    	try {
	    	child1.open();
	    	child2.open();
	    	
	    	if (child1.hasNext()) {
	    		name1 = Database.getCatalog().getTableName(child1.next().getRecordId().getPageId().getTableId());
	    	}
	    	
	    	if (child2.hasNext()) {
	    		name2 = Database.getCatalog().getTableName(child2.next().getRecordId().getPageId().getTableId());
	    	}
	    	
	    	child1.close();
	    	child2.close();
    	} catch (Exception e) {
    		e.printStackTrace();
    	}

    	this.tupleDescJoin = TupleDesc.merge(td1.addPrefix(name1 + "."), td2.addPrefix(name2 + "."));
    }

    public JoinPredicate getJoinPredicate() {
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return name1 + "." + child1.getTupleDesc().getFieldName(p.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        return name2 + "." + child2.getTupleDesc().getFieldName(p.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        return tupleDescJoin;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
    	super.open();
        child1.open();
        child2.open();
    }

    public void close() {
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        loopInChild2 = false;
        tupleLoop1 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    	Tuple tuple2;
    	
        while (child1.hasNext() || child2.hasNext()) {
        	if (loopInChild2) {
        		if (child2.hasNext()) {
        			tuple2 = child2.next();
        			
        			if (p.filter(tupleLoop1, tuple2)) {
        				return Tuple.merge(tupleLoop1, tuple2);
        			}
        		} else {
        			if (child1.hasNext()) { //Else all the tuples have been browsed
        				child2.rewind();
        				loopInChild2 = false;
        			}
        		}
        	} else {
        		tupleLoop1 = child1.next();
        		loopInChild2 = true;
        		child2.rewind();
        	}
        }
        
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        return new OpIterator[] { child1, child2 };
    }

    @Override
    public void setChildren(OpIterator[] children) {
        child1 = children[0];
    	child2 = children[1];
        TupleDesc td1 = child1.getTupleDesc();
    	TupleDesc td2 = child2.getTupleDesc();
    	this.tupleDescJoin = TupleDesc.merge(td1, td2);
    }

}
